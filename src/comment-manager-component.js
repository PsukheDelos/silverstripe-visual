import React from 'react';
import $ from 'jquery';
import CommentFormComponent from './comment-form-component';
import CommentListComponent from './comment-list-component';

class CommentManagerComponent extends React.Component {

    constructor(props) {
        super(props);

        this.state = {
            comments: []
        };

        this.handleCommentSubmit = this.handleCommentSubmit.bind(this);

    }

    componentDidMount() {
        $.getJSON(this.props.source, this.handleNewCommentData.bind(this));
    }

    render() {
      var commentProps = {
        data: this.state.comments,
        endpoints: this.props.endpoints
      };

      var commentMethods = {
        handleCommentSubmit: this.handleCommentSubmit
      }

        return (
            <div className='comment-manager-component'>
                <CommentFormComponent {...commentMethods}/>
                <CommentListComponent {...commentProps}/>
            </div>
        );
    }

    handleNewCommentData(data) {
        this.setState({
            comments: data.comments
        });
    }

    handleCommentSubmit(comment) {
      // var comments = this.state.data;
      console.log("handleCommentSubmit() --> " + comment);

      // Optimistically set an id on the new comment. It will be replaced by an
      // id generated by the server. In a production application you would likely
      // not use Date.now() for this and would have a more robust system in place.
      // comment.id = Date.now();
      // var newComments = comments.concat([comment]);
      // this.setState({data: newComments});
      // $.ajax({
      //   url: this.props.url,
      //   dataType: 'json',
      //   type: 'POST',
      //   data: comment,
      //   success: function(data) {
      //     this.setState({data: data});
      //   }.bind(this),
      //   error: function(xhr, status, err) {
      //     this.setState({data: comments});
      //     console.error(this.props.url, status, err.toString());
      //   }.bind(this)
      // });
    }


}

CommentManagerComponent.propTypes = {
    source: React.PropTypes.string.isRequired
}

export default CommentManagerComponent;
